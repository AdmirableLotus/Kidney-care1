import React, { useState, useEffect } from 'react';
import axios from 'axios';
import './medication.css';
import { FaPlus } from 'react-icons/fa';

const MedicationTracker = () => {
  const [medications, setMedications] = useState([]);
  const [showForm, setShowForm] = useState(false);
  const [formData, setFormData] = useState({ name: '', dosage: '', frequency: '' });
  const [error, setError] = useState('');

  useEffect(() => {
    fetchMedications();
  }, []);

  const fetchMedications = async () => {
    try {
      const token = localStorage.getItem('token');
      const res = await axios.get('http://localhost:5000/api/patient/medications', {
        headers: { Authorization: `Bearer ${token}` }
      });
      setMedications(res.data);
    } catch (err) {
      console.error('Error fetching medications:', err);
    }
  };

  const handleInputChange = e => {
    setFormData({ ...formData, [e.target.name]: e.target.value });
  };

  const handleAddMedication = async e => {
    e.preventDefault();
    setError('');

    if (!formData.name || !formData.dosage || !formData.frequency) {
      setError('All fields are required.');
      return;
    }

    try {
      const token = localStorage.getItem('token');
      await axios.post('http://localhost:5000/api/patient/medications', formData, {
        headers: { Authorization: `Bearer ${token}` }
      });
      setFormData({ name: '', dosage: '', frequency: '' });
      setShowForm(false);
      fetchMedications();
    } catch (err) {
      console.error('Error adding medication:', err);
      setError('Failed to add medication.');
    }
  };

  const handleDelete = async id => {
    if (!window.confirm('Delete this medication?')) return;
    try {
      const token = localStorage.getItem('token');
      await axios.delete(`http://localhost:5000/api/patient/medications/${id}`, {
        headers: { Authorization: `Bearer ${token}` }
      });
      setMedications(medications.filter(med => med._id !== id));
    } catch (err) {
      console.error('Error deleting medication:', err);
    }
  };

  return (
    <div className="medication-list">
      <h3>Your Medications</h3>
      <button className="add-medication-toggle" onClick={() => setShowForm(!showForm)}>
        <FaPlus /> Add Medication
      </button>

      {showForm && (
        <form className="medication-form" onSubmit={handleAddMedication}>
          <h3>Add Medication</h3>
          <label>
            Name:
            <input
              type="text"
              name="name"
              placeholder="e.g. Lisinopril"
              value={formData.name}
              onChange={handleInputChange}
              required
            />
          </label>
          <label>
            Dosage:
            <input
              type="text"
              name="dosage"
              placeholder="e.g. 10mg"
              value={formData.dosage}
              onChange={handleInputChange}
              required
            />
          </label>
          <label>
            Frequency:
            <input
              type="text"
              name="frequency"
              placeholder="e.g. Once daily"
              value={formData.frequency}
              onChange={handleInputChange}
              required
            />
          </label>
          <button type="submit">Add</button>
          {error && <p className="error">{error}</p>}
        </form>
      )}

      <ul>
        {medications.map((med) => (
          <li key={med._id}>
            <strong>{med.name}</strong>
            <em>{med.dosage}, {med.frequency}</em>
            <button onClick={() => handleDelete(med._id)}>Delete</button>
          </li>
        ))}
      </ul>
    </div>
  );
};

export default MedicationTracker;